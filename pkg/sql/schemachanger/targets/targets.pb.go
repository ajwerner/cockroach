// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/schemachanger/targets/targets.proto

package targets

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import descpb "github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb"

import github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb "github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type State int32

const (
	State_UNKNOWN               State = 0
	State_ABSENT                State = 1
	State_DELETE_ONLY           State = 2
	State_DELETE_AND_WRITE_ONLY State = 3
	State_BACKFILLED            State = 4
	State_VALIDATED             State = 5
	State_PUBLIC                State = 6
)

var State_name = map[int32]string{
	0: "UNKNOWN",
	1: "ABSENT",
	2: "DELETE_ONLY",
	3: "DELETE_AND_WRITE_ONLY",
	4: "BACKFILLED",
	5: "VALIDATED",
	6: "PUBLIC",
}
var State_value = map[string]int32{
	"UNKNOWN":               0,
	"ABSENT":                1,
	"DELETE_ONLY":           2,
	"DELETE_AND_WRITE_ONLY": 3,
	"BACKFILLED":            4,
	"VALIDATED":             5,
	"PUBLIC":                6,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}
func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_targets_0c38f521f2f9d45a, []int{0}
}

type TargetProto struct {
	AddColumn                     *AddColumn                     `protobuf:"bytes,1,opt,name=add_column,json=addColumn,proto3" json:"add_column,omitempty"`
	DropColumn                    *DropColumn                    `protobuf:"bytes,2,opt,name=drop_column,json=dropColumn,proto3" json:"drop_column,omitempty"`
	AddIndex                      *AddIndex                      `protobuf:"bytes,3,opt,name=add_index,json=addIndex,proto3" json:"add_index,omitempty"`
	DropIndex                     *DropIndex                     `protobuf:"bytes,4,opt,name=drop_index,json=dropIndex,proto3" json:"drop_index,omitempty"`
	AddSequenceDependency         *AddSequenceDependency         `protobuf:"bytes,5,opt,name=add_sequence_dependency,json=addSequenceDependency,proto3" json:"add_sequence_dependency,omitempty"`
	AddColumnFamilyDependency     *AddColumnFamily               `protobuf:"bytes,6,opt,name=add_column_family_dependency,json=addColumnFamilyDependency,proto3" json:"add_column_family_dependency,omitempty"`
	AddUniqueConstraint           *AddUniqueConstraint           `protobuf:"bytes,7,opt,name=add_unique_constraint,json=addUniqueConstraint,proto3" json:"add_unique_constraint,omitempty"`
	DropUniqueConstraint          *DropUniqueConstraint          `protobuf:"bytes,8,opt,name=drop_unique_constraint,json=dropUniqueConstraint,proto3" json:"drop_unique_constraint,omitempty"`
	AddCheckConstraint            *AddCheckConstraint            `protobuf:"bytes,9,opt,name=add_check_constraint,json=addCheckConstraint,proto3" json:"add_check_constraint,omitempty"`
	AddCheckConstraintUnvalidated *AddCheckConstraintUnvalidated `protobuf:"bytes,10,opt,name=add_check_constraint_unvalidated,json=addCheckConstraintUnvalidated,proto3" json:"add_check_constraint_unvalidated,omitempty"`
	DropCheckConstraint           *DropCheckConstraint           `protobuf:"bytes,11,opt,name=drop_check_constraint,json=dropCheckConstraint,proto3" json:"drop_check_constraint,omitempty"`
	AddPrimaryIndex               *AddPrimaryIndex               `protobuf:"bytes,12,opt,name=add_primary_index,json=addPrimaryIndex,proto3" json:"add_primary_index,omitempty"`
	DropPrimaryIndex              *DropPrimaryIndex              `protobuf:"bytes,13,opt,name=drop_primary_index,json=dropPrimaryIndex,proto3" json:"drop_primary_index,omitempty"`
}

func (m *TargetProto) Reset()         { *m = TargetProto{} }
func (m *TargetProto) String() string { return proto.CompactTextString(m) }
func (*TargetProto) ProtoMessage()    {}
func (*TargetProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_targets_0c38f521f2f9d45a, []int{0}
}
func (m *TargetProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TargetProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *TargetProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetProto.Merge(dst, src)
}
func (m *TargetProto) XXX_Size() int {
	return m.Size()
}
func (m *TargetProto) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetProto.DiscardUnknown(m)
}

var xxx_messageInfo_TargetProto proto.InternalMessageInfo

type AddColumn struct {
	TableID      github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID       `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	ColumnFamily github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.FamilyID `protobuf:"varint,2,opt,name=column_family,json=columnFamily,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.FamilyID" json:"column_family,omitempty"`
	Column       descpb.ColumnDescriptor                                          `protobuf:"bytes,3,opt,name=column,proto3" json:"column"`
}

func (m *AddColumn) Reset()         { *m = AddColumn{} }
func (m *AddColumn) String() string { return proto.CompactTextString(m) }
func (*AddColumn) ProtoMessage()    {}
func (*AddColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_targets_0c38f521f2f9d45a, []int{1}
}
func (m *AddColumn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *AddColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddColumn.Merge(dst, src)
}
func (m *AddColumn) XXX_Size() int {
	return m.Size()
}
func (m *AddColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_AddColumn.DiscardUnknown(m)
}

var xxx_messageInfo_AddColumn proto.InternalMessageInfo

type DropColumn struct {
	TableID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	// TODO (lucy): Replace this with the column descriptor.
	ColumnID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,2,opt,name=column_id,json=columnId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"column_id,omitempty"`
}

func (m *DropColumn) Reset()         { *m = DropColumn{} }
func (m *DropColumn) String() string { return proto.CompactTextString(m) }
func (*DropColumn) ProtoMessage()    {}
func (*DropColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_targets_0c38f521f2f9d45a, []int{2}
}
func (m *DropColumn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DropColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *DropColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DropColumn.Merge(dst, src)
}
func (m *DropColumn) XXX_Size() int {
	return m.Size()
}
func (m *DropColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_DropColumn.DiscardUnknown(m)
}

var xxx_messageInfo_DropColumn proto.InternalMessageInfo

type AddIndex struct {
	TableID        github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID      `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	Index          descpb.IndexDescriptor                                          `protobuf:"bytes,2,opt,name=index,proto3" json:"index"`
	PrimaryIndex   github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID `protobuf:"varint,3,opt,name=primary_index,json=primaryIndex,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.IndexID" json:"primary_index,omitempty"`
	ReplacementFor github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID `protobuf:"varint,4,opt,name=replacement_for,json=replacementFor,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.IndexID" json:"replacement_for,omitempty"`
}

func (m *AddIndex) Reset()         { *m = AddIndex{} }
func (m *AddIndex) String() string { return proto.CompactTextString(m) }
func (*AddIndex) ProtoMessage()    {}
func (*AddIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_targets_0c38f521f2f9d45a, []int{3}
}
func (m *AddIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *AddIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddIndex.Merge(dst, src)
}
func (m *AddIndex) XXX_Size() int {
	return m.Size()
}
func (m *AddIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_AddIndex.DiscardUnknown(m)
}

var xxx_messageInfo_AddIndex proto.InternalMessageInfo

type DropIndex struct {
	TableID    github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID      `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	IndexID    github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.IndexID" json:"index_id,omitempty"`
	ReplacedBy github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID `protobuf:"varint,3,opt,name=replaced_by,json=replacedBy,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.IndexID" json:"replaced_by,omitempty"`
	// TODO (lucy): Replace this with the index descriptor.
	ColumnIDs []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,4,rep,packed,name=column_ids,json=columnIds,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"column_ids,omitempty"`
}

func (m *DropIndex) Reset()         { *m = DropIndex{} }
func (m *DropIndex) String() string { return proto.CompactTextString(m) }
func (*DropIndex) ProtoMessage()    {}
func (*DropIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_targets_0c38f521f2f9d45a, []int{4}
}
func (m *DropIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DropIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *DropIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DropIndex.Merge(dst, src)
}
func (m *DropIndex) XXX_Size() int {
	return m.Size()
}
func (m *DropIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_DropIndex.DiscardUnknown(m)
}

var xxx_messageInfo_DropIndex proto.InternalMessageInfo

type AddSequenceDependency struct {
	TableID    github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID       `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	ColumnID   github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,2,opt,name=column_id,json=columnId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"column_id,omitempty"`
	SequenceID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID       `protobuf:"varint,3,opt,name=sequence_id,json=sequenceId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"sequence_id,omitempty"`
}

func (m *AddSequenceDependency) Reset()         { *m = AddSequenceDependency{} }
func (m *AddSequenceDependency) String() string { return proto.CompactTextString(m) }
func (*AddSequenceDependency) ProtoMessage()    {}
func (*AddSequenceDependency) Descriptor() ([]byte, []int) {
	return fileDescriptor_targets_0c38f521f2f9d45a, []int{5}
}
func (m *AddSequenceDependency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddSequenceDependency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *AddSequenceDependency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddSequenceDependency.Merge(dst, src)
}
func (m *AddSequenceDependency) XXX_Size() int {
	return m.Size()
}
func (m *AddSequenceDependency) XXX_DiscardUnknown() {
	xxx_messageInfo_AddSequenceDependency.DiscardUnknown(m)
}

var xxx_messageInfo_AddSequenceDependency proto.InternalMessageInfo

type AddColumnFamily struct {
	TableID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	Family  descpb.ColumnFamilyDescriptor                              `protobuf:"bytes,2,opt,name=family,proto3" json:"family"`
}

func (m *AddColumnFamily) Reset()         { *m = AddColumnFamily{} }
func (m *AddColumnFamily) String() string { return proto.CompactTextString(m) }
func (*AddColumnFamily) ProtoMessage()    {}
func (*AddColumnFamily) Descriptor() ([]byte, []int) {
	return fileDescriptor_targets_0c38f521f2f9d45a, []int{6}
}
func (m *AddColumnFamily) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddColumnFamily) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *AddColumnFamily) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddColumnFamily.Merge(dst, src)
}
func (m *AddColumnFamily) XXX_Size() int {
	return m.Size()
}
func (m *AddColumnFamily) XXX_DiscardUnknown() {
	xxx_messageInfo_AddColumnFamily.DiscardUnknown(m)
}

var xxx_messageInfo_AddColumnFamily proto.InternalMessageInfo

type AddUniqueConstraint struct {
	TableID   github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID         `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	IndexID   github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID    `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.IndexID" json:"index_id,omitempty"`
	ColumnIDs []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,3,rep,packed,name=column_ids,json=columnIds,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"column_ids,omitempty"`
}

func (m *AddUniqueConstraint) Reset()         { *m = AddUniqueConstraint{} }
func (m *AddUniqueConstraint) String() string { return proto.CompactTextString(m) }
func (*AddUniqueConstraint) ProtoMessage()    {}
func (*AddUniqueConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_targets_0c38f521f2f9d45a, []int{7}
}
func (m *AddUniqueConstraint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddUniqueConstraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *AddUniqueConstraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddUniqueConstraint.Merge(dst, src)
}
func (m *AddUniqueConstraint) XXX_Size() int {
	return m.Size()
}
func (m *AddUniqueConstraint) XXX_DiscardUnknown() {
	xxx_messageInfo_AddUniqueConstraint.DiscardUnknown(m)
}

var xxx_messageInfo_AddUniqueConstraint proto.InternalMessageInfo

type DropUniqueConstraint struct {
	TableID   github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID         `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	IndexID   github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID    `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.IndexID" json:"index_id,omitempty"`
	ColumnIDs []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,3,rep,packed,name=column_ids,json=columnIds,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"column_ids,omitempty"`
}

func (m *DropUniqueConstraint) Reset()         { *m = DropUniqueConstraint{} }
func (m *DropUniqueConstraint) String() string { return proto.CompactTextString(m) }
func (*DropUniqueConstraint) ProtoMessage()    {}
func (*DropUniqueConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_targets_0c38f521f2f9d45a, []int{8}
}
func (m *DropUniqueConstraint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DropUniqueConstraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *DropUniqueConstraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DropUniqueConstraint.Merge(dst, src)
}
func (m *DropUniqueConstraint) XXX_Size() int {
	return m.Size()
}
func (m *DropUniqueConstraint) XXX_DiscardUnknown() {
	xxx_messageInfo_DropUniqueConstraint.DiscardUnknown(m)
}

var xxx_messageInfo_DropUniqueConstraint proto.InternalMessageInfo

type AddCheckConstraint struct {
	TableID   github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID         `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	Name      string                                                             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Expr      string                                                             `protobuf:"bytes,3,opt,name=expr,proto3" json:"expr,omitempty"`
	ColumnIDs []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,4,rep,packed,name=column_ids,json=columnIds,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"column_ids,omitempty"`
}

func (m *AddCheckConstraint) Reset()         { *m = AddCheckConstraint{} }
func (m *AddCheckConstraint) String() string { return proto.CompactTextString(m) }
func (*AddCheckConstraint) ProtoMessage()    {}
func (*AddCheckConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_targets_0c38f521f2f9d45a, []int{9}
}
func (m *AddCheckConstraint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddCheckConstraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *AddCheckConstraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCheckConstraint.Merge(dst, src)
}
func (m *AddCheckConstraint) XXX_Size() int {
	return m.Size()
}
func (m *AddCheckConstraint) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCheckConstraint.DiscardUnknown(m)
}

var xxx_messageInfo_AddCheckConstraint proto.InternalMessageInfo

type AddCheckConstraintUnvalidated struct {
	TableID   github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID         `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	Name      string                                                             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Expr      string                                                             `protobuf:"bytes,3,opt,name=expr,proto3" json:"expr,omitempty"`
	ColumnIDs []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,4,rep,packed,name=column_ids,json=columnIds,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"column_ids,omitempty"`
}

func (m *AddCheckConstraintUnvalidated) Reset()         { *m = AddCheckConstraintUnvalidated{} }
func (m *AddCheckConstraintUnvalidated) String() string { return proto.CompactTextString(m) }
func (*AddCheckConstraintUnvalidated) ProtoMessage()    {}
func (*AddCheckConstraintUnvalidated) Descriptor() ([]byte, []int) {
	return fileDescriptor_targets_0c38f521f2f9d45a, []int{10}
}
func (m *AddCheckConstraintUnvalidated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddCheckConstraintUnvalidated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *AddCheckConstraintUnvalidated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCheckConstraintUnvalidated.Merge(dst, src)
}
func (m *AddCheckConstraintUnvalidated) XXX_Size() int {
	return m.Size()
}
func (m *AddCheckConstraintUnvalidated) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCheckConstraintUnvalidated.DiscardUnknown(m)
}

var xxx_messageInfo_AddCheckConstraintUnvalidated proto.InternalMessageInfo

type DropCheckConstraint struct {
	TableID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	Name    string                                                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DropCheckConstraint) Reset()         { *m = DropCheckConstraint{} }
func (m *DropCheckConstraint) String() string { return proto.CompactTextString(m) }
func (*DropCheckConstraint) ProtoMessage()    {}
func (*DropCheckConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_targets_0c38f521f2f9d45a, []int{11}
}
func (m *DropCheckConstraint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DropCheckConstraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *DropCheckConstraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DropCheckConstraint.Merge(dst, src)
}
func (m *DropCheckConstraint) XXX_Size() int {
	return m.Size()
}
func (m *DropCheckConstraint) XXX_DiscardUnknown() {
	xxx_messageInfo_DropCheckConstraint.DiscardUnknown(m)
}

var xxx_messageInfo_DropCheckConstraint proto.InternalMessageInfo

type AddPrimaryIndex struct {
	TableID          github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID         `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	Index            descpb.IndexDescriptor                                             `protobuf:"bytes,2,opt,name=index,proto3" json:"index"`
	PrimaryIndex     github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID    `protobuf:"varint,3,opt,name=primary_index,json=primaryIndex,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.IndexID" json:"primary_index,omitempty"`
	ReplacementFor   github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID    `protobuf:"varint,4,opt,name=replacement_for,json=replacementFor,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.IndexID" json:"replacement_for,omitempty"`
	StoreColumnIDs   []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,5,rep,packed,name=store_column_ids,json=storeColumnIds,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"store_column_ids,omitempty"`
	StoreColumnNames []string                                                           `protobuf:"bytes,6,rep,name=store_column_names,json=storeColumnNames,proto3" json:"store_column_names,omitempty"`
}

func (m *AddPrimaryIndex) Reset()         { *m = AddPrimaryIndex{} }
func (m *AddPrimaryIndex) String() string { return proto.CompactTextString(m) }
func (*AddPrimaryIndex) ProtoMessage()    {}
func (*AddPrimaryIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_targets_0c38f521f2f9d45a, []int{12}
}
func (m *AddPrimaryIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPrimaryIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *AddPrimaryIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPrimaryIndex.Merge(dst, src)
}
func (m *AddPrimaryIndex) XXX_Size() int {
	return m.Size()
}
func (m *AddPrimaryIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPrimaryIndex.DiscardUnknown(m)
}

var xxx_messageInfo_AddPrimaryIndex proto.InternalMessageInfo

type DropPrimaryIndex struct {
	TableID          github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID         `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	Index            descpb.IndexDescriptor                                             `protobuf:"bytes,2,opt,name=index,proto3" json:"index"`
	ReplacedBy       github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID    `protobuf:"varint,3,opt,name=replaced_by,json=replacedBy,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.IndexID" json:"replaced_by,omitempty"`
	StoreColumnIDs   []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,4,rep,packed,name=store_column_ids,json=storeColumnIds,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"store_column_ids,omitempty"`
	StoreColumnNames []string                                                           `protobuf:"bytes,5,rep,name=store_column_names,json=storeColumnNames,proto3" json:"store_column_names,omitempty"`
}

func (m *DropPrimaryIndex) Reset()         { *m = DropPrimaryIndex{} }
func (m *DropPrimaryIndex) String() string { return proto.CompactTextString(m) }
func (*DropPrimaryIndex) ProtoMessage()    {}
func (*DropPrimaryIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_targets_0c38f521f2f9d45a, []int{13}
}
func (m *DropPrimaryIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DropPrimaryIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *DropPrimaryIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DropPrimaryIndex.Merge(dst, src)
}
func (m *DropPrimaryIndex) XXX_Size() int {
	return m.Size()
}
func (m *DropPrimaryIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_DropPrimaryIndex.DiscardUnknown(m)
}

var xxx_messageInfo_DropPrimaryIndex proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TargetProto)(nil), "cockroach.sql.schemachanger.targets.TargetProto")
	proto.RegisterType((*AddColumn)(nil), "cockroach.sql.schemachanger.targets.AddColumn")
	proto.RegisterType((*DropColumn)(nil), "cockroach.sql.schemachanger.targets.DropColumn")
	proto.RegisterType((*AddIndex)(nil), "cockroach.sql.schemachanger.targets.AddIndex")
	proto.RegisterType((*DropIndex)(nil), "cockroach.sql.schemachanger.targets.DropIndex")
	proto.RegisterType((*AddSequenceDependency)(nil), "cockroach.sql.schemachanger.targets.AddSequenceDependency")
	proto.RegisterType((*AddColumnFamily)(nil), "cockroach.sql.schemachanger.targets.AddColumnFamily")
	proto.RegisterType((*AddUniqueConstraint)(nil), "cockroach.sql.schemachanger.targets.AddUniqueConstraint")
	proto.RegisterType((*DropUniqueConstraint)(nil), "cockroach.sql.schemachanger.targets.DropUniqueConstraint")
	proto.RegisterType((*AddCheckConstraint)(nil), "cockroach.sql.schemachanger.targets.AddCheckConstraint")
	proto.RegisterType((*AddCheckConstraintUnvalidated)(nil), "cockroach.sql.schemachanger.targets.AddCheckConstraintUnvalidated")
	proto.RegisterType((*DropCheckConstraint)(nil), "cockroach.sql.schemachanger.targets.DropCheckConstraint")
	proto.RegisterType((*AddPrimaryIndex)(nil), "cockroach.sql.schemachanger.targets.AddPrimaryIndex")
	proto.RegisterType((*DropPrimaryIndex)(nil), "cockroach.sql.schemachanger.targets.DropPrimaryIndex")
	proto.RegisterEnum("cockroach.sql.schemachanger.targets.State", State_name, State_value)
}
func (this *AddColumn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddColumn)
	if !ok {
		that2, ok := that.(AddColumn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.ColumnFamily != that1.ColumnFamily {
		return false
	}
	if !this.Column.Equal(&that1.Column) {
		return false
	}
	return true
}
func (this *DropColumn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DropColumn)
	if !ok {
		that2, ok := that.(DropColumn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.ColumnID != that1.ColumnID {
		return false
	}
	return true
}
func (this *AddIndex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddIndex)
	if !ok {
		that2, ok := that.(AddIndex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if !this.Index.Equal(&that1.Index) {
		return false
	}
	if this.PrimaryIndex != that1.PrimaryIndex {
		return false
	}
	if this.ReplacementFor != that1.ReplacementFor {
		return false
	}
	return true
}
func (this *DropIndex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DropIndex)
	if !ok {
		that2, ok := that.(DropIndex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.IndexID != that1.IndexID {
		return false
	}
	if this.ReplacedBy != that1.ReplacedBy {
		return false
	}
	if len(this.ColumnIDs) != len(that1.ColumnIDs) {
		return false
	}
	for i := range this.ColumnIDs {
		if this.ColumnIDs[i] != that1.ColumnIDs[i] {
			return false
		}
	}
	return true
}
func (this *AddSequenceDependency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddSequenceDependency)
	if !ok {
		that2, ok := that.(AddSequenceDependency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.ColumnID != that1.ColumnID {
		return false
	}
	if this.SequenceID != that1.SequenceID {
		return false
	}
	return true
}
func (this *AddColumnFamily) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddColumnFamily)
	if !ok {
		that2, ok := that.(AddColumnFamily)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if !this.Family.Equal(&that1.Family) {
		return false
	}
	return true
}
func (this *AddUniqueConstraint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddUniqueConstraint)
	if !ok {
		that2, ok := that.(AddUniqueConstraint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.IndexID != that1.IndexID {
		return false
	}
	if len(this.ColumnIDs) != len(that1.ColumnIDs) {
		return false
	}
	for i := range this.ColumnIDs {
		if this.ColumnIDs[i] != that1.ColumnIDs[i] {
			return false
		}
	}
	return true
}
func (this *DropUniqueConstraint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DropUniqueConstraint)
	if !ok {
		that2, ok := that.(DropUniqueConstraint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.IndexID != that1.IndexID {
		return false
	}
	if len(this.ColumnIDs) != len(that1.ColumnIDs) {
		return false
	}
	for i := range this.ColumnIDs {
		if this.ColumnIDs[i] != that1.ColumnIDs[i] {
			return false
		}
	}
	return true
}
func (this *AddCheckConstraint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddCheckConstraint)
	if !ok {
		that2, ok := that.(AddCheckConstraint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Expr != that1.Expr {
		return false
	}
	if len(this.ColumnIDs) != len(that1.ColumnIDs) {
		return false
	}
	for i := range this.ColumnIDs {
		if this.ColumnIDs[i] != that1.ColumnIDs[i] {
			return false
		}
	}
	return true
}
func (this *AddCheckConstraintUnvalidated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddCheckConstraintUnvalidated)
	if !ok {
		that2, ok := that.(AddCheckConstraintUnvalidated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Expr != that1.Expr {
		return false
	}
	if len(this.ColumnIDs) != len(that1.ColumnIDs) {
		return false
	}
	for i := range this.ColumnIDs {
		if this.ColumnIDs[i] != that1.ColumnIDs[i] {
			return false
		}
	}
	return true
}
func (this *DropCheckConstraint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DropCheckConstraint)
	if !ok {
		that2, ok := that.(DropCheckConstraint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *AddPrimaryIndex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddPrimaryIndex)
	if !ok {
		that2, ok := that.(AddPrimaryIndex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if !this.Index.Equal(&that1.Index) {
		return false
	}
	if this.PrimaryIndex != that1.PrimaryIndex {
		return false
	}
	if this.ReplacementFor != that1.ReplacementFor {
		return false
	}
	if len(this.StoreColumnIDs) != len(that1.StoreColumnIDs) {
		return false
	}
	for i := range this.StoreColumnIDs {
		if this.StoreColumnIDs[i] != that1.StoreColumnIDs[i] {
			return false
		}
	}
	if len(this.StoreColumnNames) != len(that1.StoreColumnNames) {
		return false
	}
	for i := range this.StoreColumnNames {
		if this.StoreColumnNames[i] != that1.StoreColumnNames[i] {
			return false
		}
	}
	return true
}
func (this *DropPrimaryIndex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DropPrimaryIndex)
	if !ok {
		that2, ok := that.(DropPrimaryIndex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if !this.Index.Equal(&that1.Index) {
		return false
	}
	if this.ReplacedBy != that1.ReplacedBy {
		return false
	}
	if len(this.StoreColumnIDs) != len(that1.StoreColumnIDs) {
		return false
	}
	for i := range this.StoreColumnIDs {
		if this.StoreColumnIDs[i] != that1.StoreColumnIDs[i] {
			return false
		}
	}
	if len(this.StoreColumnNames) != len(that1.StoreColumnNames) {
		return false
	}
	for i := range this.StoreColumnNames {
		if this.StoreColumnNames[i] != that1.StoreColumnNames[i] {
			return false
		}
	}
	return true
}
func (m *TargetProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AddColumn != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.AddColumn.Size()))
		n1, err := m.AddColumn.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.DropColumn != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.DropColumn.Size()))
		n2, err := m.DropColumn.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.AddIndex != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.AddIndex.Size()))
		n3, err := m.AddIndex.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.DropIndex != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.DropIndex.Size()))
		n4, err := m.DropIndex.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.AddSequenceDependency != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.AddSequenceDependency.Size()))
		n5, err := m.AddSequenceDependency.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.AddColumnFamilyDependency != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.AddColumnFamilyDependency.Size()))
		n6, err := m.AddColumnFamilyDependency.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.AddUniqueConstraint != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.AddUniqueConstraint.Size()))
		n7, err := m.AddUniqueConstraint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.DropUniqueConstraint != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.DropUniqueConstraint.Size()))
		n8, err := m.DropUniqueConstraint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.AddCheckConstraint != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.AddCheckConstraint.Size()))
		n9, err := m.AddCheckConstraint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.AddCheckConstraintUnvalidated != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.AddCheckConstraintUnvalidated.Size()))
		n10, err := m.AddCheckConstraintUnvalidated.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.DropCheckConstraint != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.DropCheckConstraint.Size()))
		n11, err := m.DropCheckConstraint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.AddPrimaryIndex != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.AddPrimaryIndex.Size()))
		n12, err := m.AddPrimaryIndex.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.DropPrimaryIndex != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.DropPrimaryIndex.Size()))
		n13, err := m.DropPrimaryIndex.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *AddColumn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddColumn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TableID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.TableID))
	}
	if m.ColumnFamily != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.ColumnFamily))
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTargets(dAtA, i, uint64(m.Column.Size()))
	n14, err := m.Column.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	return i, nil
}

func (m *DropColumn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropColumn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TableID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.TableID))
	}
	if m.ColumnID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.ColumnID))
	}
	return i, nil
}

func (m *AddIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddIndex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TableID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.TableID))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintTargets(dAtA, i, uint64(m.Index.Size()))
	n15, err := m.Index.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	if m.PrimaryIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.PrimaryIndex))
	}
	if m.ReplacementFor != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.ReplacementFor))
	}
	return i, nil
}

func (m *DropIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropIndex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TableID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.TableID))
	}
	if m.IndexID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.IndexID))
	}
	if m.ReplacedBy != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.ReplacedBy))
	}
	if len(m.ColumnIDs) > 0 {
		dAtA17 := make([]byte, len(m.ColumnIDs)*10)
		var j16 int
		for _, num := range m.ColumnIDs {
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintTargets(dAtA, i, uint64(j16))
		i += copy(dAtA[i:], dAtA17[:j16])
	}
	return i, nil
}

func (m *AddSequenceDependency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddSequenceDependency) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TableID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.TableID))
	}
	if m.ColumnID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.ColumnID))
	}
	if m.SequenceID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.SequenceID))
	}
	return i, nil
}

func (m *AddColumnFamily) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddColumnFamily) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TableID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.TableID))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintTargets(dAtA, i, uint64(m.Family.Size()))
	n18, err := m.Family.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	return i, nil
}

func (m *AddUniqueConstraint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddUniqueConstraint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TableID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.TableID))
	}
	if m.IndexID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.IndexID))
	}
	if len(m.ColumnIDs) > 0 {
		dAtA20 := make([]byte, len(m.ColumnIDs)*10)
		var j19 int
		for _, num := range m.ColumnIDs {
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTargets(dAtA, i, uint64(j19))
		i += copy(dAtA[i:], dAtA20[:j19])
	}
	return i, nil
}

func (m *DropUniqueConstraint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropUniqueConstraint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TableID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.TableID))
	}
	if m.IndexID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.IndexID))
	}
	if len(m.ColumnIDs) > 0 {
		dAtA22 := make([]byte, len(m.ColumnIDs)*10)
		var j21 int
		for _, num := range m.ColumnIDs {
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTargets(dAtA, i, uint64(j21))
		i += copy(dAtA[i:], dAtA22[:j21])
	}
	return i, nil
}

func (m *AddCheckConstraint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddCheckConstraint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TableID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.TableID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTargets(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Expr) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTargets(dAtA, i, uint64(len(m.Expr)))
		i += copy(dAtA[i:], m.Expr)
	}
	if len(m.ColumnIDs) > 0 {
		dAtA24 := make([]byte, len(m.ColumnIDs)*10)
		var j23 int
		for _, num := range m.ColumnIDs {
			for num >= 1<<7 {
				dAtA24[j23] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j23++
			}
			dAtA24[j23] = uint8(num)
			j23++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintTargets(dAtA, i, uint64(j23))
		i += copy(dAtA[i:], dAtA24[:j23])
	}
	return i, nil
}

func (m *AddCheckConstraintUnvalidated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddCheckConstraintUnvalidated) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TableID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.TableID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTargets(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Expr) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTargets(dAtA, i, uint64(len(m.Expr)))
		i += copy(dAtA[i:], m.Expr)
	}
	if len(m.ColumnIDs) > 0 {
		dAtA26 := make([]byte, len(m.ColumnIDs)*10)
		var j25 int
		for _, num := range m.ColumnIDs {
			for num >= 1<<7 {
				dAtA26[j25] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j25++
			}
			dAtA26[j25] = uint8(num)
			j25++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintTargets(dAtA, i, uint64(j25))
		i += copy(dAtA[i:], dAtA26[:j25])
	}
	return i, nil
}

func (m *DropCheckConstraint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropCheckConstraint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TableID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.TableID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTargets(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *AddPrimaryIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPrimaryIndex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TableID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.TableID))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintTargets(dAtA, i, uint64(m.Index.Size()))
	n27, err := m.Index.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	if m.PrimaryIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.PrimaryIndex))
	}
	if m.ReplacementFor != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.ReplacementFor))
	}
	if len(m.StoreColumnIDs) > 0 {
		dAtA29 := make([]byte, len(m.StoreColumnIDs)*10)
		var j28 int
		for _, num := range m.StoreColumnIDs {
			for num >= 1<<7 {
				dAtA29[j28] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j28++
			}
			dAtA29[j28] = uint8(num)
			j28++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTargets(dAtA, i, uint64(j28))
		i += copy(dAtA[i:], dAtA29[:j28])
	}
	if len(m.StoreColumnNames) > 0 {
		for _, s := range m.StoreColumnNames {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *DropPrimaryIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropPrimaryIndex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TableID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.TableID))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintTargets(dAtA, i, uint64(m.Index.Size()))
	n30, err := m.Index.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n30
	if m.ReplacedBy != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTargets(dAtA, i, uint64(m.ReplacedBy))
	}
	if len(m.StoreColumnIDs) > 0 {
		dAtA32 := make([]byte, len(m.StoreColumnIDs)*10)
		var j31 int
		for _, num := range m.StoreColumnIDs {
			for num >= 1<<7 {
				dAtA32[j31] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j31++
			}
			dAtA32[j31] = uint8(num)
			j31++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintTargets(dAtA, i, uint64(j31))
		i += copy(dAtA[i:], dAtA32[:j31])
	}
	if len(m.StoreColumnNames) > 0 {
		for _, s := range m.StoreColumnNames {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintTargets(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TargetProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddColumn != nil {
		l = m.AddColumn.Size()
		n += 1 + l + sovTargets(uint64(l))
	}
	if m.DropColumn != nil {
		l = m.DropColumn.Size()
		n += 1 + l + sovTargets(uint64(l))
	}
	if m.AddIndex != nil {
		l = m.AddIndex.Size()
		n += 1 + l + sovTargets(uint64(l))
	}
	if m.DropIndex != nil {
		l = m.DropIndex.Size()
		n += 1 + l + sovTargets(uint64(l))
	}
	if m.AddSequenceDependency != nil {
		l = m.AddSequenceDependency.Size()
		n += 1 + l + sovTargets(uint64(l))
	}
	if m.AddColumnFamilyDependency != nil {
		l = m.AddColumnFamilyDependency.Size()
		n += 1 + l + sovTargets(uint64(l))
	}
	if m.AddUniqueConstraint != nil {
		l = m.AddUniqueConstraint.Size()
		n += 1 + l + sovTargets(uint64(l))
	}
	if m.DropUniqueConstraint != nil {
		l = m.DropUniqueConstraint.Size()
		n += 1 + l + sovTargets(uint64(l))
	}
	if m.AddCheckConstraint != nil {
		l = m.AddCheckConstraint.Size()
		n += 1 + l + sovTargets(uint64(l))
	}
	if m.AddCheckConstraintUnvalidated != nil {
		l = m.AddCheckConstraintUnvalidated.Size()
		n += 1 + l + sovTargets(uint64(l))
	}
	if m.DropCheckConstraint != nil {
		l = m.DropCheckConstraint.Size()
		n += 1 + l + sovTargets(uint64(l))
	}
	if m.AddPrimaryIndex != nil {
		l = m.AddPrimaryIndex.Size()
		n += 1 + l + sovTargets(uint64(l))
	}
	if m.DropPrimaryIndex != nil {
		l = m.DropPrimaryIndex.Size()
		n += 1 + l + sovTargets(uint64(l))
	}
	return n
}

func (m *AddColumn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovTargets(uint64(m.TableID))
	}
	if m.ColumnFamily != 0 {
		n += 1 + sovTargets(uint64(m.ColumnFamily))
	}
	l = m.Column.Size()
	n += 1 + l + sovTargets(uint64(l))
	return n
}

func (m *DropColumn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovTargets(uint64(m.TableID))
	}
	if m.ColumnID != 0 {
		n += 1 + sovTargets(uint64(m.ColumnID))
	}
	return n
}

func (m *AddIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovTargets(uint64(m.TableID))
	}
	l = m.Index.Size()
	n += 1 + l + sovTargets(uint64(l))
	if m.PrimaryIndex != 0 {
		n += 1 + sovTargets(uint64(m.PrimaryIndex))
	}
	if m.ReplacementFor != 0 {
		n += 1 + sovTargets(uint64(m.ReplacementFor))
	}
	return n
}

func (m *DropIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovTargets(uint64(m.TableID))
	}
	if m.IndexID != 0 {
		n += 1 + sovTargets(uint64(m.IndexID))
	}
	if m.ReplacedBy != 0 {
		n += 1 + sovTargets(uint64(m.ReplacedBy))
	}
	if len(m.ColumnIDs) > 0 {
		l = 0
		for _, e := range m.ColumnIDs {
			l += sovTargets(uint64(e))
		}
		n += 1 + sovTargets(uint64(l)) + l
	}
	return n
}

func (m *AddSequenceDependency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovTargets(uint64(m.TableID))
	}
	if m.ColumnID != 0 {
		n += 1 + sovTargets(uint64(m.ColumnID))
	}
	if m.SequenceID != 0 {
		n += 1 + sovTargets(uint64(m.SequenceID))
	}
	return n
}

func (m *AddColumnFamily) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovTargets(uint64(m.TableID))
	}
	l = m.Family.Size()
	n += 1 + l + sovTargets(uint64(l))
	return n
}

func (m *AddUniqueConstraint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovTargets(uint64(m.TableID))
	}
	if m.IndexID != 0 {
		n += 1 + sovTargets(uint64(m.IndexID))
	}
	if len(m.ColumnIDs) > 0 {
		l = 0
		for _, e := range m.ColumnIDs {
			l += sovTargets(uint64(e))
		}
		n += 1 + sovTargets(uint64(l)) + l
	}
	return n
}

func (m *DropUniqueConstraint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovTargets(uint64(m.TableID))
	}
	if m.IndexID != 0 {
		n += 1 + sovTargets(uint64(m.IndexID))
	}
	if len(m.ColumnIDs) > 0 {
		l = 0
		for _, e := range m.ColumnIDs {
			l += sovTargets(uint64(e))
		}
		n += 1 + sovTargets(uint64(l)) + l
	}
	return n
}

func (m *AddCheckConstraint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovTargets(uint64(m.TableID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTargets(uint64(l))
	}
	l = len(m.Expr)
	if l > 0 {
		n += 1 + l + sovTargets(uint64(l))
	}
	if len(m.ColumnIDs) > 0 {
		l = 0
		for _, e := range m.ColumnIDs {
			l += sovTargets(uint64(e))
		}
		n += 1 + sovTargets(uint64(l)) + l
	}
	return n
}

func (m *AddCheckConstraintUnvalidated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovTargets(uint64(m.TableID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTargets(uint64(l))
	}
	l = len(m.Expr)
	if l > 0 {
		n += 1 + l + sovTargets(uint64(l))
	}
	if len(m.ColumnIDs) > 0 {
		l = 0
		for _, e := range m.ColumnIDs {
			l += sovTargets(uint64(e))
		}
		n += 1 + sovTargets(uint64(l)) + l
	}
	return n
}

func (m *DropCheckConstraint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovTargets(uint64(m.TableID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTargets(uint64(l))
	}
	return n
}

func (m *AddPrimaryIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovTargets(uint64(m.TableID))
	}
	l = m.Index.Size()
	n += 1 + l + sovTargets(uint64(l))
	if m.PrimaryIndex != 0 {
		n += 1 + sovTargets(uint64(m.PrimaryIndex))
	}
	if m.ReplacementFor != 0 {
		n += 1 + sovTargets(uint64(m.ReplacementFor))
	}
	if len(m.StoreColumnIDs) > 0 {
		l = 0
		for _, e := range m.StoreColumnIDs {
			l += sovTargets(uint64(e))
		}
		n += 1 + sovTargets(uint64(l)) + l
	}
	if len(m.StoreColumnNames) > 0 {
		for _, s := range m.StoreColumnNames {
			l = len(s)
			n += 1 + l + sovTargets(uint64(l))
		}
	}
	return n
}

func (m *DropPrimaryIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovTargets(uint64(m.TableID))
	}
	l = m.Index.Size()
	n += 1 + l + sovTargets(uint64(l))
	if m.ReplacedBy != 0 {
		n += 1 + sovTargets(uint64(m.ReplacedBy))
	}
	if len(m.StoreColumnIDs) > 0 {
		l = 0
		for _, e := range m.StoreColumnIDs {
			l += sovTargets(uint64(e))
		}
		n += 1 + sovTargets(uint64(l)) + l
	}
	if len(m.StoreColumnNames) > 0 {
		for _, s := range m.StoreColumnNames {
			l = len(s)
			n += 1 + l + sovTargets(uint64(l))
		}
	}
	return n
}

func sovTargets(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTargets(x uint64) (n int) {
	return sovTargets(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TargetProto) GetValue() interface{} {
	if this.AddColumn != nil {
		return this.AddColumn
	}
	if this.DropColumn != nil {
		return this.DropColumn
	}
	if this.AddIndex != nil {
		return this.AddIndex
	}
	if this.DropIndex != nil {
		return this.DropIndex
	}
	if this.AddSequenceDependency != nil {
		return this.AddSequenceDependency
	}
	if this.AddColumnFamilyDependency != nil {
		return this.AddColumnFamilyDependency
	}
	if this.AddUniqueConstraint != nil {
		return this.AddUniqueConstraint
	}
	if this.DropUniqueConstraint != nil {
		return this.DropUniqueConstraint
	}
	if this.AddCheckConstraint != nil {
		return this.AddCheckConstraint
	}
	if this.AddCheckConstraintUnvalidated != nil {
		return this.AddCheckConstraintUnvalidated
	}
	if this.DropCheckConstraint != nil {
		return this.DropCheckConstraint
	}
	if this.AddPrimaryIndex != nil {
		return this.AddPrimaryIndex
	}
	if this.DropPrimaryIndex != nil {
		return this.DropPrimaryIndex
	}
	return nil
}

func (this *TargetProto) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *AddColumn:
		this.AddColumn = vt
	case *DropColumn:
		this.DropColumn = vt
	case *AddIndex:
		this.AddIndex = vt
	case *DropIndex:
		this.DropIndex = vt
	case *AddSequenceDependency:
		this.AddSequenceDependency = vt
	case *AddColumnFamily:
		this.AddColumnFamilyDependency = vt
	case *AddUniqueConstraint:
		this.AddUniqueConstraint = vt
	case *DropUniqueConstraint:
		this.DropUniqueConstraint = vt
	case *AddCheckConstraint:
		this.AddCheckConstraint = vt
	case *AddCheckConstraintUnvalidated:
		this.AddCheckConstraintUnvalidated = vt
	case *DropCheckConstraint:
		this.DropCheckConstraint = vt
	case *AddPrimaryIndex:
		this.AddPrimaryIndex = vt
	case *DropPrimaryIndex:
		this.DropPrimaryIndex = vt
	default:
		return false
	}
	return true
}
func (m *TargetProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTargets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddColumn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddColumn == nil {
				m.AddColumn = &AddColumn{}
			}
			if err := m.AddColumn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropColumn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DropColumn == nil {
				m.DropColumn = &DropColumn{}
			}
			if err := m.DropColumn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddIndex == nil {
				m.AddIndex = &AddIndex{}
			}
			if err := m.AddIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DropIndex == nil {
				m.DropIndex = &DropIndex{}
			}
			if err := m.DropIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddSequenceDependency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddSequenceDependency == nil {
				m.AddSequenceDependency = &AddSequenceDependency{}
			}
			if err := m.AddSequenceDependency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddColumnFamilyDependency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddColumnFamilyDependency == nil {
				m.AddColumnFamilyDependency = &AddColumnFamily{}
			}
			if err := m.AddColumnFamilyDependency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddUniqueConstraint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddUniqueConstraint == nil {
				m.AddUniqueConstraint = &AddUniqueConstraint{}
			}
			if err := m.AddUniqueConstraint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropUniqueConstraint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DropUniqueConstraint == nil {
				m.DropUniqueConstraint = &DropUniqueConstraint{}
			}
			if err := m.DropUniqueConstraint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddCheckConstraint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddCheckConstraint == nil {
				m.AddCheckConstraint = &AddCheckConstraint{}
			}
			if err := m.AddCheckConstraint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddCheckConstraintUnvalidated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddCheckConstraintUnvalidated == nil {
				m.AddCheckConstraintUnvalidated = &AddCheckConstraintUnvalidated{}
			}
			if err := m.AddCheckConstraintUnvalidated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropCheckConstraint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DropCheckConstraint == nil {
				m.DropCheckConstraint = &DropCheckConstraint{}
			}
			if err := m.DropCheckConstraint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddPrimaryIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddPrimaryIndex == nil {
				m.AddPrimaryIndex = &AddPrimaryIndex{}
			}
			if err := m.AddPrimaryIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropPrimaryIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DropPrimaryIndex == nil {
				m.DropPrimaryIndex = &DropPrimaryIndex{}
			}
			if err := m.DropPrimaryIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTargets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTargets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddColumn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTargets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddColumn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddColumn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnFamily", wireType)
			}
			m.ColumnFamily = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnFamily |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.FamilyID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Column.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTargets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTargets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropColumn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTargets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropColumn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropColumn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnID", wireType)
			}
			m.ColumnID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnID |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTargets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTargets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTargets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryIndex", wireType)
			}
			m.PrimaryIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryIndex |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplacementFor", wireType)
			}
			m.ReplacementFor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplacementFor |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTargets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTargets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTargets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexID", wireType)
			}
			m.IndexID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexID |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplacedBy", wireType)
			}
			m.ReplacedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplacedBy |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTargets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ColumnIDs = append(m.ColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTargets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTargets
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ColumnIDs) == 0 {
					m.ColumnIDs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTargets
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ColumnIDs = append(m.ColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTargets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTargets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddSequenceDependency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTargets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddSequenceDependency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddSequenceDependency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnID", wireType)
			}
			m.ColumnID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnID |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceID", wireType)
			}
			m.SequenceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceID |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTargets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTargets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddColumnFamily) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTargets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddColumnFamily: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddColumnFamily: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Family.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTargets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTargets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddUniqueConstraint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTargets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddUniqueConstraint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddUniqueConstraint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexID", wireType)
			}
			m.IndexID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexID |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTargets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ColumnIDs = append(m.ColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTargets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTargets
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ColumnIDs) == 0 {
					m.ColumnIDs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTargets
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ColumnIDs = append(m.ColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTargets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTargets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropUniqueConstraint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTargets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropUniqueConstraint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropUniqueConstraint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexID", wireType)
			}
			m.IndexID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexID |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTargets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ColumnIDs = append(m.ColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTargets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTargets
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ColumnIDs) == 0 {
					m.ColumnIDs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTargets
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ColumnIDs = append(m.ColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTargets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTargets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddCheckConstraint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTargets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddCheckConstraint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddCheckConstraint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTargets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ColumnIDs = append(m.ColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTargets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTargets
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ColumnIDs) == 0 {
					m.ColumnIDs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTargets
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ColumnIDs = append(m.ColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTargets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTargets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddCheckConstraintUnvalidated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTargets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddCheckConstraintUnvalidated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddCheckConstraintUnvalidated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTargets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ColumnIDs = append(m.ColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTargets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTargets
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ColumnIDs) == 0 {
					m.ColumnIDs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTargets
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ColumnIDs = append(m.ColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTargets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTargets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropCheckConstraint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTargets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropCheckConstraint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropCheckConstraint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTargets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTargets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPrimaryIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTargets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPrimaryIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPrimaryIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryIndex", wireType)
			}
			m.PrimaryIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryIndex |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplacementFor", wireType)
			}
			m.ReplacementFor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplacementFor |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTargets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StoreColumnIDs = append(m.StoreColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTargets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTargets
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StoreColumnIDs) == 0 {
					m.StoreColumnIDs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTargets
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StoreColumnIDs = append(m.StoreColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreColumnIDs", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreColumnNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreColumnNames = append(m.StoreColumnNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTargets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTargets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropPrimaryIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTargets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropPrimaryIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropPrimaryIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplacedBy", wireType)
			}
			m.ReplacedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplacedBy |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTargets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StoreColumnIDs = append(m.StoreColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTargets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTargets
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StoreColumnIDs) == 0 {
					m.StoreColumnIDs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTargets
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StoreColumnIDs = append(m.StoreColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreColumnIDs", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreColumnNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTargets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreColumnNames = append(m.StoreColumnNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTargets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTargets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTargets(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTargets
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTargets
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTargets
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTargets
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTargets(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTargets = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTargets   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("sql/schemachanger/targets/targets.proto", fileDescriptor_targets_0c38f521f2f9d45a)
}

var fileDescriptor_targets_0c38f521f2f9d45a = []byte{
	// 1211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcd, 0x6f, 0x1b, 0xc5,
	0x1b, 0xf6, 0xfa, 0x7b, 0x5f, 0xd7, 0x89, 0x7f, 0x93, 0xe4, 0x87, 0x5b, 0x51, 0x3b, 0x6a, 0x25,
	0x1a, 0x90, 0xb0, 0x25, 0x3e, 0x04, 0xe4, 0x02, 0xde, 0xd8, 0x91, 0x96, 0x18, 0x37, 0x6c, 0x92,
	0x56, 0x70, 0x59, 0xc6, 0x3b, 0x53, 0x7b, 0x15, 0x7b, 0x77, 0xb3, 0xbb, 0x86, 0xe6, 0xc6, 0x9d,
	0x0b, 0x42, 0xe2, 0xc2, 0x89, 0x0b, 0x07, 0xfe, 0x05, 0xfe, 0x01, 0x22, 0x4e, 0x3d, 0xf6, 0x64,
	0x5a, 0xe7, 0x00, 0x37, 0xee, 0x3d, 0xa1, 0x99, 0xdd, 0x75, 0xbc, 0xb6, 0xa9, 0x9c, 0xd4, 0x72,
	0xa0, 0xca, 0x29, 0xa3, 0x77, 0x33, 0xcf, 0xf3, 0x7e, 0x3d, 0x33, 0xef, 0x18, 0xee, 0x38, 0x47,
	0x9d, 0xb2, 0xa3, 0xb5, 0x69, 0x17, 0x6b, 0x6d, 0x6c, 0xb4, 0xa8, 0x5d, 0x76, 0xb1, 0xdd, 0xa2,
	0xae, 0x13, 0xfc, 0x2d, 0x59, 0xb6, 0xe9, 0x9a, 0xe8, 0xb6, 0x66, 0x6a, 0x87, 0xb6, 0x89, 0xb5,
	0x76, 0xc9, 0x39, 0xea, 0x94, 0x42, 0x5b, 0x4a, 0xfe, 0xbf, 0xde, 0xb8, 0xcd, 0xd0, 0x34, 0xec,
	0xe2, 0x8e, 0xd9, 0x2a, 0x13, 0xea, 0x68, 0x56, 0xb3, 0xec, 0xb8, 0x76, 0x4f, 0x73, 0x7b, 0x36,
	0x25, 0x1e, 0xd2, 0x8d, 0xd5, 0x96, 0xd9, 0x32, 0xf9, 0xb2, 0xcc, 0x56, 0x9e, 0xf5, 0xd6, 0xaf,
	0x00, 0x99, 0x7d, 0x0e, 0xb3, 0xcb, 0xf9, 0x3e, 0x01, 0xc0, 0x84, 0xa8, 0x9a, 0xd9, 0xe9, 0x75,
	0x8d, 0xbc, 0xb0, 0x2e, 0x6c, 0x64, 0xde, 0x2a, 0x95, 0x66, 0x70, 0xa2, 0x54, 0x21, 0x64, 0x8b,
	0xef, 0x52, 0x44, 0x1c, 0x2c, 0xd1, 0x2e, 0x64, 0x88, 0x6d, 0x5a, 0x01, 0x5e, 0x94, 0xe3, 0x95,
	0x67, 0xc2, 0xab, 0xda, 0xa6, 0xe5, 0x03, 0x02, 0x19, 0xae, 0xd1, 0xc7, 0xc0, 0xe0, 0x55, 0xdd,
	0x20, 0xf4, 0x61, 0x3e, 0xc6, 0xf1, 0xde, 0x9c, 0xd5, 0x3f, 0x99, 0x6d, 0x52, 0xd2, 0xd8, 0x5f,
	0xb1, 0x60, 0xb9, 0x77, 0x1e, 0x58, 0xfc, 0x1c, 0xc1, 0x32, 0xe7, 0x3c, 0x34, 0x91, 0x04, 0x4b,
	0x64, 0xc3, 0x2b, 0xcc, 0x35, 0x87, 0x1e, 0xf5, 0xa8, 0xa1, 0x51, 0x95, 0x50, 0x8b, 0x1a, 0x84,
	0x1a, 0xda, 0x71, 0x3e, 0xc1, 0xb1, 0x37, 0x67, 0x75, 0x74, 0xcf, 0x87, 0xa8, 0x0e, 0x11, 0x94,
	0x35, 0x3c, 0xcd, 0x8c, 0x7a, 0xf0, 0xea, 0x59, 0xbd, 0xd4, 0x07, 0xb8, 0xab, 0x77, 0x8e, 0x47,
	0x89, 0x93, 0x9c, 0xf8, 0x9d, 0xf3, 0x55, 0x70, 0x9b, 0xc3, 0x28, 0xd7, 0x71, 0xd8, 0x30, 0x42,
	0xdb, 0x01, 0xe6, 0x8f, 0xda, 0x33, 0xf4, 0xa3, 0x1e, 0x55, 0x35, 0xd3, 0x70, 0x5c, 0x1b, 0xeb,
	0x86, 0x9b, 0x4f, 0x71, 0xbe, 0xf7, 0x67, 0xe5, 0x3b, 0xe0, 0x00, 0x5b, 0xc3, 0xfd, 0xca, 0x0a,
	0x9e, 0x34, 0x22, 0x13, 0xfe, 0xcf, 0xeb, 0x34, 0x49, 0x97, 0xe6, 0x74, 0x1f, 0xcc, 0x5c, 0xb3,
	0x09, 0xbe, 0x55, 0x32, 0xc5, 0x8a, 0x74, 0x58, 0xe5, 0x59, 0x6d, 0x53, 0xed, 0x70, 0x94, 0x4e,
	0xe4, 0x74, 0xef, 0xcd, 0x9c, 0x4d, 0xb6, 0x7f, 0x84, 0x0c, 0xe1, 0x09, 0x1b, 0xfa, 0x46, 0x80,
	0xf5, 0x69, 0x5c, 0x6a, 0xcf, 0xf8, 0x12, 0x77, 0x74, 0x82, 0x5d, 0x4a, 0xf2, 0xc0, 0x79, 0xa5,
	0x0b, 0xf2, 0x1e, 0x9c, 0x21, 0x29, 0x37, 0xf1, 0xf3, 0x3e, 0xb3, 0xba, 0x7a, 0x7a, 0x1d, 0x8f,
	0x3c, 0x73, 0x8e, 0xba, 0x72, 0xe5, 0x8e, 0x85, 0xbe, 0x42, 0x26, 0x8d, 0xe8, 0x0b, 0xf8, 0x1f,
	0x0b, 0xdd, 0xb2, 0xf5, 0x2e, 0xb6, 0x8f, 0x7d, 0x19, 0x5e, 0x3b, 0x5f, 0xc7, 0xee, 0x7a, 0x9b,
	0x3d, 0x31, 0x2e, 0xe3, 0xb0, 0x01, 0x69, 0x80, 0x78, 0x3c, 0x61, 0x8a, 0x2c, 0xa7, 0x78, 0x77,
	0xe6, 0x60, 0x42, 0x1c, 0x39, 0x32, 0x66, 0xd9, 0x8c, 0x9f, 0xfc, 0x58, 0x14, 0x6e, 0xfd, 0x1c,
	0x05, 0x71, 0xa8, 0x20, 0x44, 0x20, 0xed, 0xe2, 0x66, 0x87, 0xaa, 0x3a, 0xe1, 0xa7, 0x68, 0x56,
	0x92, 0x07, 0xfd, 0x62, 0x6a, 0x9f, 0xd9, 0xe4, 0xea, 0xb3, 0x7e, 0x71, 0xb3, 0xa5, 0xbb, 0xed,
	0x5e, 0xb3, 0xa4, 0x99, 0xdd, 0xf2, 0xd0, 0x0f, 0xd2, 0x3c, 0x5b, 0x97, 0xad, 0xc3, 0x56, 0x79,
	0xf2, 0x60, 0x2f, 0xc9, 0x55, 0x25, 0xc5, 0xa1, 0x65, 0x82, 0x74, 0xc8, 0x86, 0x94, 0xcf, 0x0f,
	0xd8, 0xac, 0xc4, 0xf0, 0x3f, 0xba, 0x28, 0xbe, 0xa7, 0x75, 0xb9, 0xaa, 0x5c, 0xd3, 0x46, 0xb4,
	0x8f, 0x6a, 0x90, 0xf4, 0x0f, 0x71, 0xef, 0xd0, 0xbd, 0x33, 0x9e, 0xbd, 0xa3, 0x4e, 0x13, 0x3b,
	0xb4, 0xe4, 0xc5, 0x5f, 0xa5, 0x8e, 0x66, 0xeb, 0x96, 0x6b, 0xda, 0x52, 0xfc, 0xa4, 0x5f, 0x8c,
	0x28, 0xfe, 0xe6, 0xcd, 0xf8, 0x9f, 0x2c, 0x57, 0x7f, 0x08, 0x00, 0x67, 0xe7, 0xfb, 0x82, 0x92,
	0xd5, 0x05, 0xd1, 0x4f, 0x96, 0x4e, 0xfc, 0x44, 0xed, 0x0e, 0xfa, 0xc5, 0xb4, 0xe7, 0x84, 0xfc,
	0x42, 0x49, 0x0b, 0x30, 0x94, 0xb4, 0x47, 0x21, 0x13, 0x3f, 0xd2, 0xef, 0x62, 0x90, 0x0e, 0x6e,
	0x9e, 0x05, 0xc5, 0x29, 0x41, 0xc2, 0x6b, 0x73, 0xef, 0xb6, 0x7d, 0xed, 0x1f, 0x0a, 0xc5, 0x5d,
	0x9a, 0xa8, 0x93, 0xb7, 0x15, 0xb5, 0x21, 0x1b, 0x96, 0x4c, 0x8c, 0xbb, 0xbb, 0xf5, 0xac, 0x5f,
	0xfc, 0xf0, 0xc2, 0x3e, 0x32, 0x20, 0xd6, 0x57, 0xd6, 0xa8, 0x42, 0x3b, 0xb0, 0x6c, 0x53, 0xab,
	0x83, 0x35, 0xda, 0xa5, 0x86, 0xab, 0x3e, 0x30, 0x6d, 0x7e, 0x11, 0xcf, 0x89, 0x6b, 0x69, 0x04,
	0x7b, 0xdb, 0xb4, 0xfd, 0xa2, 0xfc, 0x12, 0x03, 0x71, 0x78, 0x83, 0x2f, 0x4c, 0xaa, 0x69, 0x9e,
	0xc9, 0xb3, 0xe6, 0x6b, 0x30, 0x16, 0xdf, 0xd1, 0x79, 0xc4, 0x9a, 0xe2, 0xf8, 0x32, 0x41, 0x04,
	0x32, 0x7e, 0xd8, 0x44, 0x6d, 0x1e, 0xcf, 0xb3, 0x74, 0x10, 0xe0, 0x4a, 0xc7, 0xc8, 0x02, 0x18,
	0xca, 0xc9, 0xc9, 0xc7, 0xd7, 0x63, 0x1b, 0x59, 0xe9, 0xd3, 0x41, 0xbf, 0x28, 0x06, 0x5a, 0x70,
	0xe6, 0x22, 0x28, 0x31, 0x10, 0x94, 0xe3, 0x17, 0xef, 0x69, 0x14, 0xd6, 0xa6, 0x8e, 0x48, 0x2f,
	0xe5, 0x31, 0x82, 0xba, 0x90, 0x19, 0x0e, 0x94, 0x3a, 0xf1, 0x8b, 0x59, 0x1f, 0xf4, 0x8b, 0x10,
	0x64, 0xe0, 0x85, 0x43, 0x83, 0x80, 0x60, 0x78, 0x6a, 0xfd, 0x26, 0xc0, 0xf2, 0xd8, 0x34, 0xb8,
	0xa0, 0xec, 0xee, 0x40, 0x72, 0xe4, 0x2a, 0x9b, 0x32, 0xdb, 0x87, 0xae, 0x99, 0x60, 0x2e, 0x1d,
	0xbf, 0x6c, 0x3c, 0x08, 0x3f, 0x98, 0x7e, 0x14, 0x56, 0xa6, 0x8c, 0x9a, 0x2f, 0x9f, 0xee, 0xc3,
	0x8a, 0x8c, 0x2d, 0x4c, 0x91, 0xbf, 0x47, 0x61, 0x75, 0xda, 0x70, 0x7d, 0x95, 0xe1, 0x79, 0x65,
	0xf8, 0x87, 0x28, 0xa0, 0xc9, 0xb9, 0x7e, 0x41, 0xf9, 0x45, 0x10, 0x37, 0x70, 0x97, 0xf2, 0xdc,
	0x8a, 0x0a, 0x5f, 0x33, 0x1b, 0x7d, 0x68, 0xd9, 0xfc, 0x38, 0x12, 0x15, 0xbe, 0xbe, 0xb4, 0x0b,
	0xe1, 0xa7, 0x28, 0xdc, 0x7c, 0xee, 0xa3, 0xe7, 0x2a, 0x4f, 0x3c, 0x4f, 0xdf, 0x0b, 0xb0, 0x32,
	0xe5, 0x69, 0x76, 0x79, 0xd9, 0xf1, 0xfd, 0x7a, 0x12, 0xe7, 0x97, 0x4d, 0xe8, 0xdd, 0x76, 0x35,
	0x29, 0x5f, 0xf2, 0xa4, 0x8c, 0xbe, 0x16, 0x20, 0xe7, 0xb8, 0xa6, 0x4d, 0xd5, 0x91, 0x66, 0x4d,
	0xf0, 0x66, 0xbd, 0x37, 0xe8, 0x17, 0x97, 0xf6, 0xd8, 0xb7, 0xf9, 0x76, 0xec, 0x92, 0x33, 0x82,
	0x49, 0x1c, 0x24, 0x01, 0x0a, 0x79, 0xc0, 0x7a, 0xc6, 0xc9, 0x27, 0xd7, 0x63, 0x1b, 0xa2, 0xb4,
	0x3a, 0xe8, 0x17, 0x73, 0x23, 0x3e, 0x34, 0xd8, 0x37, 0x25, 0xe7, 0x8c, 0x59, 0xfc, 0x16, 0xfb,
	0x2b, 0x06, 0xb9, 0xf1, 0x87, 0xfc, 0x7f, 0xa8, 0xc7, 0x16, 0x33, 0xd0, 0x4f, 0xad, 0x78, 0xfc,
	0x5f, 0x50, 0xf1, 0xc4, 0xf9, 0x2b, 0xfe, 0xc6, 0x57, 0x90, 0xd8, 0x73, 0xb1, 0x4b, 0x51, 0x06,
	0x52, 0x07, 0x8d, 0x9d, 0xc6, 0xdd, 0xfb, 0x8d, 0x5c, 0x04, 0x01, 0x24, 0x2b, 0xd2, 0x5e, 0xad,
	0xb1, 0x9f, 0x13, 0xd0, 0x32, 0x64, 0xaa, 0xb5, 0x7a, 0x6d, 0xbf, 0xa6, 0xde, 0x6d, 0xd4, 0x3f,
	0xcb, 0x45, 0xd1, 0x75, 0x58, 0xf3, 0x0d, 0x95, 0x46, 0x55, 0xbd, 0xaf, 0xc8, 0xc1, 0xa7, 0x18,
	0x5a, 0x02, 0x90, 0x2a, 0x5b, 0x3b, 0xdb, 0x72, 0xbd, 0x5e, 0xab, 0xe6, 0xe2, 0x28, 0x0b, 0xe2,
	0xbd, 0x4a, 0x5d, 0xae, 0x56, 0xf6, 0x6b, 0xd5, 0x5c, 0x82, 0xc1, 0xee, 0x1e, 0x48, 0x75, 0x79,
	0x2b, 0x97, 0x94, 0x5e, 0x3f, 0x79, 0x5a, 0x88, 0x9c, 0x0c, 0x0a, 0xc2, 0xa3, 0x41, 0x41, 0x78,
	0x3c, 0x28, 0x08, 0x4f, 0x06, 0x05, 0xe1, 0xdb, 0xd3, 0x42, 0xe4, 0xd1, 0x69, 0x21, 0xf2, 0xf8,
	0xb4, 0x10, 0xf9, 0x3c, 0xe5, 0xff, 0xb4, 0xd4, 0x4c, 0xf2, 0x9f, 0xe0, 0xdf, 0xfe, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0x37, 0xb3, 0x47, 0x91, 0x0d, 0x18, 0x00, 0x00,
}
